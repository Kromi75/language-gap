'scopeName': 'source.gap.script'
'fileTypes': [
  '00'
]
'name': 'GAP Script'
'patterns': [
  # single line comments
  {
    'match': '//.*$'
    'name': 'comment.line.double-slash.gapscript'
  }
  # named section declaration
  {
    'captures':
      '1':
        'name': 'entity.name.function.module.gapscript'
      '3':
        'name': 'entity.name.function.module.gapscript'
    'match': '(\\[(?i:MODUL|FORM|SUBFORM)\\s+)([A-Za-z0-9_]*)(\\])'
  }
  # standard section declaration
  {
    'name': 'entity.name.section.module.gapscript'
    'match': '\\[(?i:PREINIT|INIT|POSTREAD|POSTSAVE|PRESAVE|POSTSHOW|SYSTIMER)\\]'
  }
  # single-quote strings
  {
    'match': '\'[^\']*\''
    'name' : 'string.quoted.single.gapscript'
  }
  # double-quote strings
  {
    'match': '\"[^\"]*\"'
    'name' : 'string.quoted.double.gapscript'
  }
  # control keywords
  {
    'match': '\\b(?i:CATCH|DO WHILE|ENDIF|END IF|ENDDO|END DO|ELSE|ELSEIF|IF|INHERIT|FINALLY|RETURN|SUPER|TRY)\\b'
    'name': 'keyword.control.gapscript'
  }
  # type keywords
  {
    'match': '\\b(?i:USUAL|DYN|STRING|INT|FLOAT|ARRAY|OBJECT|LOGIC|DWORD)\\b'
    'name': 'storage.type.gapscript'
  }
  # other keywords
  {
    'match': '\\b(?i:DATA|LOCAL|AS|STATIC)\\b'
    'name': 'keyword.other.gapscript'
  }
  # supporting variables
  {
    'match': '\\b(?i:Doku|Form|_log)\\b'
    'name': 'support.variable.gapscript'
  }
  # supporting constants
  {
    'match': '\\b(?i:NIL|TRUE|FALSE)\\b'
    'name': 'support.constant.gapscript'
  }
  # supporting constants
  {
    'match': '(?i:\\.T\\.|\\.F\\.)'
    'name': 'support.constant.gapscript'
  }
  # operators (boolean)
  {
    'match': '(?i)(\\.and\\.|\\.not\\.|\\.or\\.)'
    'name': 'keyword.operator.gapscript'
  }
  # operators (other)
  {
    'match': ':|\\.|\\*|\\+|-|/|\\$|!|='
    'name': 'keyword.operator.gapscript'
  }
  # constant numbers
  {
    'captures':
      '1':
        'name': 'constant.numeric.gapscript'
    'match': '\\b([0-9.]+)\\b'
    'name': 'meta.numberic.gapscript'
  }
]
